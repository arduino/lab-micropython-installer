name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    if: github.repository == 'arduino/lab-micropython-installer'
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-2019
    runs-on: ${{ matrix.config.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@master
      with:
        node-version: 18
    - name: install dependencies
      run: npm install
    - name: install signing certificate (macOS)
      if: ${{ runner.OS == 'macOS' }}
      shell: bash
      env:
        SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64_MACOS }}
        P12_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD_MACOS }}
        # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_API_KEY_DATA: ${{ secrets.APPLE_API_KEY }}      
      run: |
        # SEE: https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
        if [ -n "$SIGNING_CERTIFICATE_BASE64" ]; then
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          export KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$SIGNING_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
        fi

        # Export API key for App Store Connect API (required for notarization)
        if [ -n "$APPLE_API_KEY_DATA" ]; then
          export APPLE_API_KEY=$RUNNER_TEMP/auth_key.p8
          echo -n "$APPLE_API_KEY_DATA" > $APPLE_API_KEY
        fi
    - name: install signing certificates (Windows)  
      if: ${{ runner.OS == 'Windows' }}    
      # SEE: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#using-a-specific-shell
      shell: bash
      env: 
        WINDOWS_BUILD_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_BUILD_CERTIFICATE_BASE64 }}      
      run: |
        if [ -n "$WINDOWS_BUILD_CERTIFICATE_BASE64" ]; then
          export WINDOWS_CERTIFICATE_FILE="${{ runner.temp }}/signing_certificate.pfx"
          # npm config set msvs_version 2017 --global
          echo "$WINDOWS_BUILD_CERTIFICATE_BASE64" | base64 --decode > "$WINDOWS_CERTIFICATE_FILE"
        fi
    - name: publish
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_SIGNING_CERTIFICATE_PASSWORD }}
      run: |
        export DEBUG=electron-osx-sign*  
        npm run publish